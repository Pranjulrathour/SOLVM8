/*
Project: SOLVEM8 – AI-Powered Assignment Solver
Stack:
- Frontend: React.js with TypeScript and Tailwind CSS
- Backend: Supabase for user authentication, database, and file storage (Node.js with TypeScript)
- Payment Integration: Razorpay (for subscription & one-time prompt packs)
- AI Integration: Gemini API (using securely stored API keys via environment variables)

Objective:
Develop a responsive web application that allows students to:
  • Upload assignment files (PDF, DOCX, Excel, images)
  • Process assignments using AI (extract text, parse questions, generate solutions)
  • Display results with iterative refinement (3 free attempts per user)
  • Export final solutions as a formatted PDF
  • Upgrade usage via a payment model (integrated with Razorpay)

------------------------------------------------------------------
Section 1: Frontend Development (React + TypeScript + Tailwind CSS)
------------------------------------------------------------------
1. **Project Initialization & Setup:**
   - Use Create React App or Vite with the TypeScript template.
   - Configure Tailwind CSS by creating a `tailwind.config.js` file; extend the theme to include your brand colors:
         • primaryGreen: "#238F51"
         • accentBluePurple: "#5B4DF0"
         • errorRed: "#EA0909"
   - Set up ESLint and Prettier for code quality and consistency.

2. **Component Architecture:**
   - **Landing Page (Hero Component):**
     • Create a functional component `Hero.tsx` that renders the SOLVEM8 logo (text styled in primaryGreen) and a tagline ("Your AI-Powered Assignment Buddy").
     • Add a call-to-action (CTA) button (“Get Started”) styled in accentBluePurple. Ensure the button is accessible (keyboard navigable, proper ARIA labels).
   - **Authentication Components:**
     • Build `SignUp.tsx` and `Login.tsx` components.
     • Use React Hook Form or Formik for form state management and validation.
     • Display error messages using errorRed and success notifications in primaryGreen.
     • Call the appropriate backend endpoints via Axios or Fetch API.
   - **Dashboard:**
     • Create a `Dashboard.tsx` component that is rendered post-login.
     • Display user information (name, email) and remaining free attempts (initially 3).
     • Design a `FileUpload.tsx` component using a library like `react-dropzone` for drag-and-drop functionality.
     • Integrate a progress bar (with primaryGreen color) to show upload progress.
     • Include sections:
         - Assignment History: List past submissions (can use a table or card layout).
         - Current Upload Area: For active file uploads.
         - Action Buttons: “Refine” (for re-processing) and “Download PDF” (to trigger PDF generation).

3. **State Management & Routing:**
   - Use React Router v6 to manage navigation between Landing, Auth, and Dashboard pages.
   - Manage global state using Context API or libraries like Redux Toolkit (if needed) for user session and free attempt count.
   - Persist user session data (from Supabase Auth) in local storage for a seamless experience.

4. **Styling & Responsiveness:**
   - Write utility classes in Tailwind CSS to ensure a responsive layout across mobile, tablet, and desktop.
   - Create a consistent design system with components for buttons, inputs, alerts, etc., using the brand palette.
   - Ensure all interactive elements have proper hover, focus, and active states defined.

5. **User Feedback & Iteration:**
   - Implement a notification component to display success, error, and informational messages.
   - Allow users to see an immediate preview of the AI-generated solution and provide an option to “Refine” the result.
   - Enable an “Export PDF” button that, when clicked, calls the backend PDF generation endpoint and offers a download link.

------------------------------------------------------------------
Section 2: Backend Development (Supabase Integration with Node.js and TypeScript)
------------------------------------------------------------------
1. **Project Setup & Environment Configuration:**
   - Initialize a Node.js project with TypeScript support (using `ts-node` and necessary type definitions).
   - Create environment variable files (e.g., `.env`) to securely store:
         • Supabase URL and API key.
         • Gemini API key.
         • Razorpay credentials.
   - Set up a framework such as Express or Fastify to build a RESTful API.

2. **Database & Supabase Integration:**
   - **Database Schema Design:**
     • **Users Table:** Fields include `id` (UUID), `email`, `passwordHash` (if not entirely handled by Supabase Auth), `freeAttempts` (integer, initial value 3), `subscriptionStatus` (string), and any other profile details.
     • **AssignmentHistory Table:** Fields include `id` (UUID), `userId` (foreign key), `fileURL` (string), `processedOutputURL` (string), `timestamp` (timestamp), `attemptCount` (integer).
   - **Supabase Storage:**
     • Configure storage buckets for file uploads and processed outputs.
     • Define security policies (RLS) to ensure that only authenticated users can access their files.

3. **API Endpoint Development:**
   - **User Authentication Endpoints:**
     • **POST /api/auth/signup:**  
         - Accept user registration data.  
         - Call Supabase Auth API to create the user.  
         - Initialize the `freeAttempts` field to 3 in the Users table.
     • **POST /api/auth/login:**  
         - Validate credentials via Supabase Auth and return a JWT for session management.
   - **File Upload Endpoint:**
     • **POST /api/upload:**  
         - Accept multipart/form-data uploads.  
         - Validate file type (restrict to PDF, DOCX, Excel, image).  
         - Upload file to Supabase Storage and return metadata (file URL, type, etc.).
   - **Assignment Processing Endpoint:**
     • **POST /api/process:**  
         - Accept a file URL or raw text (after extraction).  
         - Depending on file type, trigger a microservice (or internal function) for text extraction:
              - PDFs: Use PyMuPDF or a Node.js PDF parser.
              - DOCX: Use a Node.js library (like `docx-parser`).
              - Excel: Use `xlsx` library.
              - Images: Use Tesseract OCR through a Node wrapper.
         - Once text is extracted, call the AI processing function.
         - **Gemini API Integration:**  
             - Implement a function `async function processAssignment(text: string): Promise<string>` that sends the text to the Gemini API (using the stored API key) and returns the AI-generated solution.
         - Update the AssignmentHistory table with the processed output URL.
         - Decrement the `freeAttempts` count for the user.
   - **PDF Generation Endpoint:**
     • **POST /api/generate-pdf:**  
         - Accept processed solution data.
         - Use a Node.js library (like `pdfkit`) to generate a formatted PDF.
         - Save the generated PDF to Supabase Storage.
         - Return the download URL for the PDF.
   - **Payment Integration Endpoint (Razorpay):**
     • **POST /api/payment/initiate:**  
         - Create a Razorpay order using Razorpay’s Node SDK.
         - Return order details to the frontend.
         - Implement a webhook endpoint to verify payment success.
         - Upon successful payment, update the user’s `freeAttempts` or subscription status in Supabase.

4. **Middleware & Error Handling:**
   - Write middleware for authentication (JWT verification) to protect endpoints.
   - Use structured error handling to return standardized JSON responses.
   - Log errors to a file or logging service for debugging.

5. **Testing & Documentation:**
   - Write unit tests for all critical API endpoints using frameworks like Jest.
   - Create API documentation (Swagger or Postman collections) to detail each endpoint’s usage.
   - Ensure thorough testing with various file types and simulate AI calls with mock data.

------------------------------------------------------------------
Section 3: AI Integration (Gemini API)
------------------------------------------------------------------
1. **Modular AI Processing:**
   - Implement an async function in TypeScript:
     ```typescript
     async function processAssignment(text: string): Promise<string> {
         const response = await fetch('https://api.gemini.example.com/v1/solve', {
             method: 'POST',
             headers: {
                 'Content-Type': 'application/json',
                 'Authorization': `Bearer ${process.env.GEMINI_API_KEY}`,
             },
             body: JSON.stringify({ prompt: text }),
         });
         if (!response.ok) {
             throw new Error('Failed to process assignment');
         }
         const data = await response.json();
         return data.solution; // Adjust based on actual API response structure
     }
     ```
   - Log inputs and outputs for debugging.
   - Design this module to be easily replaceable if you decide to integrate additional AI models later.

------------------------------------------------------------------
Section 4: Additional Considerations
------------------------------------------------------------------
1. **Security:**  
   - Enforce authentication on every API endpoint.
   - Use HTTPS for secure client-server communication.
   - Implement Supabase RLS (Row-Level Security) rules for file and data access.
2. **Error Handling & Logging:**  
   - Standardize JSON error responses and log errors for troubleshooting.
3. **Scalability:**  
   - Design APIs to be stateless; consider asynchronous processing for long-running tasks.
4. **User Experience:**  
   - Maintain consistent branding with your color palette across UI and error messages.
   - Provide clear instructions at every step (upload, process, refine, export).
5. **Testing:**  
   - Ensure unit and integration tests are in place for all modules.
   - Use tools like Postman for API testing.

------------------------------------------------------------------
Section 5: Final Notes
------------------------------------------------------------------
- **Deployment & Environment Setup:**  
   - Deployment details will be discussed later.
- **Documentation:**  
   - Maintain comprehensive code and API documentation.
- **Payment & Free Usage:**  
   - Implement a free tier (3 free prompts per user) and configure Razorpay for paid upgrades.

------------------------------------------------------------------
Summary:
- **Frontend:**  
  React with TypeScript and Tailwind CSS for a responsive, modern UI. Detailed components for landing, authentication, dashboard (file upload, solution display, history, and export functions).  
- **Backend:**  
  Node.js with TypeScript integrated with Supabase for authentication, database, and file storage. API endpoints for file upload, assignment processing (using Gemini API), PDF generation, and payment (via Razorpay).  
- **AI Integration:**  
  Gemini API used through a secure, modular function with the API key stored in environment variables.
  
This complete prompt serves as a full industrial-grade specification to guide your development of SOLVEM8. Adjust and refine each module as you move forward, and ensure all sensitive keys are managed securely via environment variables.

---

Feel free to request further modifications or clarifications as you proceed with your project development!
