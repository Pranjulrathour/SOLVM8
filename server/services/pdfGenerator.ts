import PDFDocument from 'pdfkit';
import { v4 as uuidv4 } from 'uuid';
import { supabaseService } from './supabase';

interface PdfOptions {
  userId: number;
  question: string;
  solution: string;
  fileUrl?: string;
}

class PdfGenerator {
  /**
   * Generate a PDF from the solution
   * @param options PDF generation options
   * @returns URL of the generated PDF
   */
  async generatePDF(options: PdfOptions): Promise<string> {
    try {
      const { userId, question, solution, fileUrl } = options;
      
      // Create a buffer to store the PDF
      const pdfBuffer: Buffer = await new Promise((resolve, reject) => {
        try {
          // Create a new PDF document
          const doc = new PDFDocument({
            margins: { top: 50, bottom: 50, left: 50, right: 50 },
            size: 'A4',
          });
          
          const buffers: Buffer[] = [];
          doc.on('data', buffers.push.bind(buffers));
          doc.on('end', () => {
            const pdfData = Buffer.concat(buffers);
            resolve(pdfData);
          });
          
          // Add header with logo
          doc.fontSize(24)
            .fillColor('#238F51')
            .text('SOLVEM8', { align: 'center' })
            .fontSize(14)
            .fillColor('#666')
            .text('Your AI-Powered Assignment Buddy', { align: 'center' })
            .moveDown(1);
          
          // Add separator line
          doc.moveTo(50, doc.y)
            .lineTo(doc.page.width - 50, doc.y)
            .stroke('#DDD')
            .moveDown(1);
          
          // Add question section
          doc.fontSize(16)
            .fillColor('#333')
            .text('Question:', { continued: true })
            .fontSize(12)
            .fillColor('#555')
            .text(' ' + question)
            .moveDown(1);
          
          // Add solution section
          doc.fontSize(16)
            .fillColor('#238F51')
            .text('Solution:')
            .fontSize(12)
            .fillColor('#333');
          
          // Format solution text with proper paragraphs and spacing
          const solutionLines = solution.split('\n');
          for (const line of solutionLines) {
            doc.text(line.trim());
            if (line.trim() === '') {
              doc.moveDown(0.5);
            }
          }
          
          // Add footer
          const footerY = doc.page.height - 50;
          doc.fontSize(10)
            .fillColor('#999')
            .text('Generated by SOLVEM8 - ' + new Date().toLocaleString(), 50, footerY, {
              align: 'center',
              width: doc.page.width - 100,
            });
          
          // Finalize the PDF
          doc.end();
        } catch (err) {
          reject(err);
        }
      });
      
      // Generate file name and path
      const fileName = `solution_${uuidv4()}.pdf`;
      const filePath = `solutions/${userId}/${fileName}`;
      
      // Upload PDF to storage
      const pdfUrl = await supabaseService.uploadFile(pdfBuffer, 'solutions', filePath);
      
      return pdfUrl;
    } catch (error) {
      console.error('PDF generation error:', error);
      throw new Error('Failed to generate PDF');
    }
  }
}

export const pdfGenerator = new PdfGenerator();
