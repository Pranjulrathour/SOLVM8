/**
 * Service for interacting with Gemini AI
 */

// Get Gemini API key from environment variables
const geminiApiKey = process.env.GEMINI_API_KEY || 'dummy-key';

class AiService {
  /**
   * Process an assignment with Gemini AI
   * @param text The text to process
   * @returns The solution generated by the AI
   */
  async processAssignment(text: string): Promise<string> {
    try {
      // Fetch from Gemini API
      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-goog-api-key': geminiApiKey,
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: `You are an expert tutor helping a student with their assignment. 
                  Please solve the following problem step by step, showing clear explanations for each step.
                  
                  Assignment: ${text}
                  
                  Provide a detailed solution that will help the student understand the concepts involved.`
                }
              ]
            }
          ],
          generationConfig: {
            temperature: 0.2,
            maxOutputTokens: 2048,
            topP: 0.8,
            topK: 40
          }
        })
      });

      if (!response.ok) {
        const errorData = await response.text();
        console.error('Gemini API Error:', errorData);
        throw new Error(`Failed to process assignment with Gemini: ${response.statusText}`);
      }

      const data = await response.json();
      
      // Extract the solution text from the response
      if (data.candidates && data.candidates[0]?.content?.parts?.[0]?.text) {
        return data.candidates[0].content.parts[0].text;
      } else {
        throw new Error('Invalid response format from Gemini API');
      }
    } catch (error) {
      console.error('AI processing error:', error);
      
      // For development without an API key, return a simulated response
      if (!geminiApiKey || geminiApiKey === 'dummy-key') {
        console.log('Using simulated AI response due to missing API key');
        return this.getSimulatedResponse(text);
      }
      
      throw new Error(error instanceof Error ? error.message : 'Failed to process with AI');
    }
  }
  
  /**
   * Generate a simulated response for development purposes
   * @param text The input text
   * @returns A simulated AI response
   */
  private getSimulatedResponse(text: string): string {
    // This is only used when no API key is available for development
    return `Step-by-step solution:

1. First, let's understand the problem:
${text}

2. We'll start by analyzing the key components:
   - The problem requires understanding the fundamental concepts
   - We need to apply appropriate formulas and methods

3. Solution approach:
   - Break down the problem into manageable parts
   - Apply relevant formulas to each part
   - Combine the results for the final answer

4. Working through the solution:
   [Detailed calculations would be shown here]

5. Final answer:
   Based on our calculations, the solution demonstrates the application of the core principles involved in this problem.

Note: This is a simulated AI response. In production, this would be replaced with an actual Gemini API response.`;
  }
}

export const aiService = new AiService();
